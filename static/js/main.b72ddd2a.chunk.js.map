{"version":3,"sources":["assets/img/cat-icon.png","ProwlFinder.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","ProwlFinder","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showSidebar","locations","toggleSidebar","bind","assertThisInitialized","mapLocations","map","window","google","maps","Map","refs","googleMap","center","lat","lng","bounds","LatLngBounds","forEach","location","marker","Marker","position","extend","fitBounds","renderMap","setState","react_default","a","createElement","Fragment","className","onClick","name","features","src","cat","ref","Component","Boolean","hostname","match","ReactDOM","render","src_ProwlFinder_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sjBAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,qQC4FzBC,cApFb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAQ,CACXC,aAAa,EACbC,UAAWA,GAGbT,EAAKU,cAAgBV,EAAKU,cAAcC,KAAnBV,OAAAW,EAAA,EAAAX,QAAAW,EAAA,EAAAX,CAAAD,KARJA,yEAWTa,GACR,IAAMC,EAAM,IAAIC,OAAOC,OAAOC,KAAKC,IACjCf,KAAKgB,KAAKC,UACV,CACEC,OAAQ,CACNC,IAAK,UACLC,KAAM,aAKNC,EAAS,IAAIT,OAAOC,OAAOC,KAAKQ,aAEtChB,EAAUiB,QAAQ,SAACC,GACjB,IAAIC,EAAS,IAAIb,OAAOC,OAAOC,KAAKY,OAClC,CACEC,SAAU,CACRR,IAAKK,EAASL,IACdC,IAAKI,EAASJ,KAEhBT,IAAKA,IAITU,EAAOO,OAAOH,EAAOE,YAGvBhB,EAAIkB,UAAUR,+CAIdrB,KAAK8B,UAAU9B,KAAKI,MAAME,mDAI1BN,KAAK+B,SAAS,CACZ1B,aAAaL,KAAKI,MAAMC,+CAK1B,OACE2B,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACInC,KAAKI,MAAMC,YACX2B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACbJ,EAAAC,EAAAC,cAAA,KAAGG,QAASrC,KAAKO,cAAe6B,UAAU,+BAE1CJ,EAAAC,EAAAC,cAAA,MAAIE,UAAU,gBACVpC,KAAKI,MAAME,UAAUK,IAAI,SAACa,GAC1B,OACEQ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACZZ,EAASc,MAEZN,EAAAC,EAAAC,cAAA,WACGV,EAASe,eAOtB,KAEFP,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACbJ,EAAAC,EAAAC,cAAA,OAAKG,QAASrC,KAAKO,cAAeiC,IAAKC,IAAKL,UAAU,eADxD,IACwEJ,EAAAC,EAAAC,cAAA,4BAExEF,EAAAC,EAAAC,cAAA,OAAKQ,IAAI,YAAYN,UAAU,uBA/EbO,aCKNC,QACW,cAA7BhC,OAAOY,SAASqB,UAEe,UAA7BjC,OAAOY,SAASqB,UAEhBjC,OAAOY,SAASqB,SAASC,MACvB,iECVNC,IAASC,OACPhB,EAAAC,EAAAC,cAACe,EAAD,MACAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b72ddd2a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat-icon.af117a4b.png\";","import React, { Component } from \"react\";\n\nimport \"./ProwlFinder.css\";\n\nimport locations from \"./locations.json\";\nimport cat from \"./assets/img/cat-icon.png\";\n\nclass ProwlFinder extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showSidebar: true,\n      locations: locations\n    };\n\n    this.toggleSidebar = this.toggleSidebar.bind(this);\n  }\n\n  renderMap(mapLocations) {\n    const map = new window.google.maps.Map(\n      this.refs.googleMap,\n      {\n        center: {\n          lat: 29.424122,\n          lng: -98.493629\n        }\n      }\n    );\n\n    const bounds = new window.google.maps.LatLngBounds();\n\n    locations.forEach((location) => {\n      let marker = new window.google.maps.Marker(\n        {\n          position: {\n            lat: location.lat,\n            lng: location.lng\n          },\n          map: map\n        }\n      );\n\n      bounds.extend(marker.position);\n    });\n\n    map.fitBounds(bounds);\n  }\n\n  componentDidMount() {\n    this.renderMap(this.state.locations);\n  }\n\n  toggleSidebar() {\n    this.setState({\n      showSidebar: this.state.showSidebar ? false : true\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        { this.state.showSidebar ?\n          <div className=\"sidebar\">\n            <i onClick={this.toggleSidebar} className=\"fa fa-remove close-sidebar\"></i>\n\n            <ul className=\"sidebar-list\">\n              { this.state.locations.map((location) => {\n                return (\n                  <li>\n                    <div className=\"text-bold\">\n                      {location.name}\n                    </div>\n                    <div>\n                      {location.features}\n                    </div>\n                  </li>\n                );\n              }) }\n            </ul>\n          </div>\n        : null }\n\n        <div className=\"header\">\n          <img onClick={this.toggleSidebar} src={cat} className=\"brand-logo\" /> <span>ProwlFinder</span>\n        </div>\n        <div ref=\"googleMap\" className=\"google-map\"></div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ProwlFinder;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport ProwlFinder from \"./ProwlFinder\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <ProwlFinder />,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}